DECLARE @reporting_date DATE
SET @reporting_date = '2023-12-22' -- Change this date as needed

DROP TABLE IF EXISTS #temp_weekly_interest

CREATE TABLE #temp_weekly_interest(
    Items VARCHAR(80),
    weekly_interest DECIMAL(6,4)
)

;WITH WeightedAverages AS (
    SELECT 
        'Marketable Debt Securities' AS ProductType,
        SUM(
            CASE 
                WHEN coupon_rate IS NOT NULL THEN principal_amt_myr * coupon_rate
                ELSE principal_amt_myr * yield_rate 
            END
        ) / SUM(principal_amt_myr) AS weighted_avg
    FROM x
    WHERE position_dt = @reporting_date
    AND product IN ('CP', 'FCY BONDS', 'FCY MTN', 'MTN')
    UNION ALL
    SELECT 
        'Corporate Debt Securities' AS ProductType,
        SUM(
            CASE 
                WHEN coupon_rate IS NOT NULL THEN principal_amt_myr * coupon_rate
                ELSE principal_amt_myr * yield_rate 
            END
        ) / SUM(principal_amt_myr) AS weighted_avg
    FROM x
    WHERE position_dt = @reporting_date
    AND product IN ('CP', 'FCY BONDS', 'FCY MTN', 'MTN')
    AND risk_party <> 'CAGAMAS - KUL'
    UNION ALL
    SELECT 
        'MGS' AS ProductType,
        SUM(principal_amt_myr * coupon_rate) / SUM(principal_amt_myr) AS weighted_avg
    FROM x
    WHERE position_dt = @reporting_date
    AND product = 'MGS'
    UNION ALL
    SELECT 
        'Cagamas Bonds' AS ProductType,
        SUM(principal_amt_myr * coupon_rate) / SUM(principal_amt_myr) AS weighted_avg
    FROM x
    WHERE position_dt = @reporting_date
    AND product = 'MTN' 
    AND risk_party = 'CAGAMAS - KUL'
    UNION ALL
    SELECT 
        'FD' AS ProductType,
        SUM(principal_amt_myr * coupon_rate) / SUM(principal_amt_myr) AS weighted_avg
    FROM x
    WHERE position_dt = @reporting_date
    UNION ALL
    SELECT 
        'Interbank Borrowings' AS ProductType,
        SUM(principal_amt_myr * coupon_rate) / SUM(principal_amt_myr) AS weighted_avg
    FROM x
    WHERE position_dt = @reporting_date
)
INSERT INTO #temp_weekly_interest (Items, weekly_interest)
SELECT 
    CASE 
        WHEN ProductType = 'Marketable Debt Securities' THEN 'Weighted Average Return on Marketable Debt Securities Outstanding'
        WHEN ProductType = 'Corporate Debt Securities' THEN 'Weighted Average Return on Corporate Debt Securities Outstanding'
        WHEN ProductType = 'MGS' THEN 'Weighted Average Return on MGS Outstanding'
        WHEN ProductType = 'Cagamas Bonds' THEN 'Weighted Average Return on Cagamas Bonds Outstanding'
        WHEN ProductType = 'FD' THEN 'Weighted Average Rate on FD Outstanding'
        WHEN ProductType = 'Interbank Borrowings' THEN 'Weighted Average Rate on Interbank Borrowings Outstanding'
    END AS Items,
    ROUND(weighted_avg, 4) AS weekly_interest
FROM WeightedAverages

SELECT *
FROM #temp_weekly_interest

-- Get the current date
DECLARE @reporting_date DATE
SET @reporting_date = GETDATE()

-- CTE to categorize fixed deposits into aging buckets
;WITH FixedDeposits AS (
    SELECT 
        counterparty_nm,
        value_dt, 
        CASE
            WHEN ABS(DATEDIFF(day, maturity_dt, value_dt)) < 32 THEN 'LE 1 Month'
            WHEN ABS(DATEDIFF(day, maturity_dt, value_dt)) < 91 THEN 'GT 1 Month to 3 Months'
            WHEN ABS(DATEDIFF(day, maturity_dt, value_dt)) < 181 THEN 'GT 3 Months to 6 Months'
            WHEN ABS(DATEDIFF(day, maturity_dt, value_dt)) < 274 THEN 'GT 6 Months to 9 Months'
            WHEN ABS(DATEDIFF(day, maturity_dt, value_dt)) < 365 THEN 'GT 9 Months to 12 Months'
            ELSE 'GT 1 Year to 3 Year'
        END AS ageing_bucket,
        principal_amt_myr,
        (principal_amt_myr * coupon_rate) AS Product
    FROM x
    WHERE position_dt = @reporting_date -- Use the automated reporting date
)

-- CTE to determine the maximum value_date for each aging bucket
, MaxValueDate AS (
    SELECT MAX(value_dt) AS value_date, ageing_bucket
    FROM FixedDeposits
    GROUP BY ageing_bucket
)

-- CTE to calculate total principal and product for each aging bucket and value_date
, FDData AS (
    SELECT 
        depo.value_date, 
        depo.ageing_bucket, 
        SUM(principal_amt_myr) AS total_principal, 
        SUM(Product) AS total_product
    FROM FixedDeposits tab
    INNER JOIN MaxValueDate depo ON tab.value_dt = depo.value_date AND tab.ageing_bucket = depo.ageing_bucket
    GROUP BY depo.value_date, depo.ageing_bucket
)

-- Final query to calculate weekly interest rates for aging buckets 
SELECT 
    value_date, 
    ageing_bucket,  
    CAST(SUM(total_product) / SUM(total_principal) AS DECIMAL(6,4)) AS weekly_interest
FROM FDData
GROUP BY ageing_bucket, value_date
ORDER BY value_date DESC
